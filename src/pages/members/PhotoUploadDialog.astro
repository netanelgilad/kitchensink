---
export interface Props {
  member?: any;
}

const { member } = Astro.props;
---

<!-- Photo Upload Dialog -->
<div
  id="photoUploadDialog"
  class="fixed inset-0 z-50 hidden bg-black/60 backdrop-blur-sm"
  onclick="if (event.target === this) closePhotoDialog()"
>
  <!-- Dialog Container -->
  <div class="flex items-center justify-center min-h-screen p-4">
    <div
      class="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 w-full max-w-2xl"
    >
      <!-- Dialog Header -->
      <div
        class="flex items-center justify-between p-6 border-b border-white/20"
      >
        <h2 class="text-2xl font-bold text-white flex items-center gap-3">
          <svg
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
            ></path>
          </svg>
          Update Profile Photo
        </h2>
        <button
          onclick="closePhotoDialog()"
          class="text-white/60 hover:text-white transition-colors p-2 hover:bg-white/10 rounded-lg"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Dialog Content -->
      <div class="p-6">
        <!-- Current Photo Preview -->
        <div class="text-center mb-6">
          <p class="text-white/80 text-sm mb-4">Current Profile Photo</p>
          <div class="relative inline-block">
            {
              member?.profile?.photo?.url ? (
                <img
                  id="currentPhoto"
                  src={member.profile.photo.url}
                  alt="Current profile photo"
                  class="w-32 h-32 rounded-full border-4 border-white/30 shadow-xl object-cover"
                />
              ) : (
                <div
                  id="currentPhoto"
                  class="w-32 h-32 rounded-full border-4 border-white/30 shadow-xl bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center"
                >
                  <svg
                    class="w-16 h-16 text-white"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                    />
                  </svg>
                </div>
              )
            }
          </div>
        </div>

        <!-- Upload Area -->
        <div class="mb-6">
          <div
            id="dropZone"
            class="border-2 border-dashed border-white/30 rounded-2xl p-8 text-center bg-white/5 hover:bg-white/10 transition-all duration-200 cursor-pointer group"
            ondragover="handleDragOver(event)"
            ondragleave="handleDragLeave(event)"
            ondrop="handleDrop(event)"
            onclick="document.getElementById('fileInput').click()"
          >
            <div id="uploadContent">
              <svg
                class="w-16 h-16 text-white/60 mx-auto mb-4 group-hover:text-white/80 transition-colors"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                ></path>
              </svg>
              <h3 class="text-xl font-semibold text-white mb-2">
                Upload New Photo
              </h3>
              <p class="text-white/60 mb-4">
                Drag & drop your image here or click to browse
              </p>
              <p class="text-white/50 text-sm">
                Supports: JPG, PNG, GIF (Max 10MB)
              </p>
            </div>

            <!-- Preview Area (Hidden initially) -->
            <div id="previewArea" class="hidden">
              <img
                id="photoPreview"
                class="w-32 h-32 rounded-full mx-auto mb-4 object-cover border-4 border-white/30"
              />
              <p class="text-white/80 font-medium mb-2">New Photo Selected</p>
              <p id="fileName" class="text-white/60 text-sm"></p>
            </div>
          </div>

          <!-- Hidden File Input -->
          <input
            type="file"
            id="fileInput"
            accept="image/*"
            class="hidden"
            onchange="handleFileSelect(event)"
          />
        </div>

        <!-- Upload Status -->
        <div id="uploadStatus" class="hidden mb-6">
          <div class="bg-white/5 rounded-xl p-4">
            <div class="flex items-center gap-3">
              <div id="statusIcon"></div>
              <div>
                <p id="statusText" class="text-white font-medium"></p>
                <div
                  id="progressBar"
                  class="w-full bg-white/20 rounded-full h-2 mt-2 hidden"
                >
                  <div
                    id="progress"
                    class="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300"
                    style="width: 0%"
                  >
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Form Actions -->
        <div class="flex gap-4">
          <button
            id="uploadBtn"
            onclick="uploadPhoto()"
            disabled
            class="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 disabled:from-gray-500 disabled:to-gray-600 disabled:cursor-not-allowed text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-xl disabled:hover:scale-100 disabled:hover:shadow-none"
          >
            <span class="flex items-center justify-center gap-3">
              <svg
                class="w-5 h-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
                ></path>
              </svg>
              Update Photo
            </span>
          </button>
          <button
            type="button"
            onclick="closePhotoDialog()"
            class="px-8 py-4 bg-white/10 hover:bg-white/20 text-white font-semibold rounded-xl transition-all duration-200"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let selectedFile: File | null = null;

  function openPhotoDialog() {
    const dialog = document.getElementById("photoUploadDialog");
    if (dialog) {
      dialog.classList.remove("hidden");
      document.body.style.overflow = "hidden";
      resetUploadState();
    }
  }

  function closePhotoDialog() {
    const dialog = document.getElementById("photoUploadDialog");
    if (dialog) {
      dialog.classList.add("hidden");
      document.body.style.overflow = "auto";
      resetUploadState();
    }
  }

  function resetUploadState() {
    selectedFile = null;
    const uploadBtn = document.getElementById("uploadBtn") as HTMLButtonElement;
    const uploadContent = document.getElementById("uploadContent");
    const previewArea = document.getElementById("previewArea");
    const uploadStatus = document.getElementById("uploadStatus");
    const dropZone = document.getElementById("dropZone");

    if (uploadBtn) uploadBtn.disabled = true;
    if (uploadContent) uploadContent.classList.remove("hidden");
    if (previewArea) previewArea.classList.add("hidden");
    if (uploadStatus) uploadStatus.classList.add("hidden");
    if (dropZone) {
      dropZone.classList.remove("border-blue-400", "bg-blue-500/10");
      dropZone.classList.add("border-white/30", "bg-white/5");
    }
  }

  function handleDragOver(event: DragEvent) {
    event.preventDefault();
    const dropZone = document.getElementById("dropZone");
    if (dropZone) {
      dropZone.classList.remove("border-white/30", "bg-white/5");
      dropZone.classList.add("border-blue-400", "bg-blue-500/10");
    }
  }

  function handleDragLeave(event: DragEvent) {
    event.preventDefault();
    const dropZone = document.getElementById("dropZone");
    if (dropZone) {
      dropZone.classList.remove("border-blue-400", "bg-blue-500/10");
      dropZone.classList.add("border-white/30", "bg-white/5");
    }
  }

  function handleDrop(event: DragEvent) {
    event.preventDefault();
    const dropZone = document.getElementById("dropZone");
    if (dropZone) {
      dropZone.classList.remove("border-blue-400", "bg-blue-500/10");
      dropZone.classList.add("border-white/30", "bg-white/5");
    }

    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      processFile(files[0]);
    }
  }

  function handleFileSelect(event: Event) {
    const input = event.target as HTMLInputElement;
    const files = input.files;
    if (files && files.length > 0) {
      processFile(files[0]);
    }
  }

  function processFile(file: File) {
    // Validate file type
    if (!file.type.startsWith("image/")) {
      showStatus("error", "Please select an image file (JPG, PNG, GIF)");
      return;
    }

    // Validate file size (10MB)
    if (file.size > 10 * 1024 * 1024) {
      showStatus("error", "File size must be less than 10MB");
      return;
    }

    selectedFile = file;
    showPreview(file);
  }

  function showPreview(file: File) {
    const uploadContent = document.getElementById("uploadContent");
    const previewArea = document.getElementById("previewArea");
    const photoPreview = document.getElementById(
      "photoPreview"
    ) as HTMLImageElement;
    const fileName = document.getElementById("fileName");
    const uploadBtn = document.getElementById("uploadBtn") as HTMLButtonElement;

    if (uploadContent) uploadContent.classList.add("hidden");
    if (previewArea) previewArea.classList.remove("hidden");
    if (uploadBtn) uploadBtn.disabled = false;
    if (fileName) fileName.textContent = file.name;

    // Create preview
    const reader = new FileReader();
    reader.onload = (e) => {
      if (photoPreview && e.target?.result) {
        photoPreview.src = e.target.result as string;
      }
    };
    reader.readAsDataURL(file);
  }

  function showStatus(type: "loading" | "success" | "error", message: string) {
    const uploadStatus = document.getElementById("uploadStatus");
    const statusIcon = document.getElementById("statusIcon");
    const statusText = document.getElementById("statusText");
    const progressBar = document.getElementById("progressBar");

    if (!uploadStatus || !statusIcon || !statusText) return;

    uploadStatus.classList.remove("hidden");
    if (progressBar) progressBar.classList.add("hidden");

    if (type === "loading") {
      statusIcon.innerHTML = `
        <div class="animate-spin w-6 h-6 border-2 border-white/30 border-t-blue-500 rounded-full"></div>
      `;
      if (progressBar) progressBar.classList.remove("hidden");
    } else if (type === "success") {
      statusIcon.innerHTML = `
        <svg class="w-6 h-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      `;
    } else {
      statusIcon.innerHTML = `
        <svg class="w-6 h-6 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      `;
    }

    statusText.textContent = message;
  }

  async function uploadPhoto() {
    if (!selectedFile) return;

    const uploadBtn = document.getElementById("uploadBtn") as HTMLButtonElement;
    if (uploadBtn) uploadBtn.disabled = true;

    try {
      showStatus("loading", "Uploading photo...");

      const formData = new FormData();
      formData.append("photo", selectedFile);

      const response = await fetch("/api/upload-photo", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        showStatus("success", "Photo updated successfully!");
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        const error = await response.text();
        showStatus("error", `Upload failed: ${error}`);
        if (uploadBtn) uploadBtn.disabled = false;
      }
    } catch (error) {
      showStatus("error", "Upload failed. Please try again.");
      if (uploadBtn) uploadBtn.disabled = false;
    }
  }

  // Make functions globally available
  (window as any).openPhotoDialog = openPhotoDialog;
  (window as any).closePhotoDialog = closePhotoDialog;
  (window as any).handleDragOver = handleDragOver;
  (window as any).handleDragLeave = handleDragLeave;
  (window as any).handleDrop = handleDrop;
  (window as any).handleFileSelect = handleFileSelect;
  (window as any).uploadPhoto = uploadPhoto;
</script>
